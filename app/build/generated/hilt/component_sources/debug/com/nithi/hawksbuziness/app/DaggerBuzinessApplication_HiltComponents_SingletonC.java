// Generated by Dagger (https://dagger.dev).
package com.nithi.hawksbuziness.app;

import android.app.Activity;
import android.app.Service;
import android.content.SharedPreferences;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.nithi.hawksbuziness.di.DataBaseModule;
import com.nithi.hawksbuziness.di.DataBaseModule_ProvideDatabaseFactory;
import com.nithi.hawksbuziness.di.DataBaseModule_ProvideProfileDaoFactory;
import com.nithi.hawksbuziness.di.Networkmodule;
import com.nithi.hawksbuziness.di.Networkmodule_ProvideServiceFactory;
import com.nithi.hawksbuziness.di.SharedPreferenceModule;
import com.nithi.hawksbuziness.di.SharedPreferenceModule_ProvideSessionManagerFactory;
import com.nithi.hawksbuziness.di.SharedPreferenceModule_ProvideSharedPreferenceFactory;
import com.nithi.hawksbuziness.local.HawksDatabase;
import com.nithi.hawksbuziness.local.dao.ProfileDao;
import com.nithi.hawksbuziness.preferences.PreferenceManger;
import com.nithi.hawksbuziness.repositarory.BusinessRepository;
import com.nithi.hawksbuziness.services.AuthApi;
import com.nithi.hawksbuziness.services.RemoteDatasource;
import com.nithi.hawksbuziness.ui.activity.MainActivity;
import com.nithi.hawksbuziness.ui.activity.MainActivity_MembersInjector;
import com.nithi.hawksbuziness.ui.activity.ReferalActivity;
import com.nithi.hawksbuziness.ui.activity.ReferenceViewModel;
import com.nithi.hawksbuziness.ui.activity.ReferenceViewModel_HiltModules_KeyModule_ProvideFactory;
import com.nithi.hawksbuziness.ui.home.HomeFragment;
import com.nithi.hawksbuziness.ui.home.HomeFragment_MembersInjector;
import com.nithi.hawksbuziness.ui.home.HomeViemodel;
import com.nithi.hawksbuziness.ui.home.HomeViemodel_HiltModules_KeyModule_ProvideFactory;
import com.nithi.hawksbuziness.ui.profile.ProfileFragment;
import com.nithi.hawksbuziness.ui.profile.ProfileViewModel;
import com.nithi.hawksbuziness.ui.profile.ProfileViewModel_HiltModules_KeyModule_ProvideFactory;
import com.nithi.hawksbuziness.ui.shops.ShopFragment;
import com.nithi.hawksbuziness.ui.shops.ShopViewmodel;
import com.nithi.hawksbuziness.ui.shops.ShopViewmodel_HiltModules_KeyModule_ProvideFactory;
import com.nithi.hawksbuziness.ui.support.SupportFragment;
import com.nithi.hawksbuziness.ui.support.SupportViewmodel;
import com.nithi.hawksbuziness.ui.support.SupportViewmodel_HiltModules_KeyModule_ProvideFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerBuzinessApplication_HiltComponents_SingletonC extends BuzinessApplication_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final DaggerBuzinessApplication_HiltComponents_SingletonC singletonC = this;

  private Provider<SharedPreferences> provideSharedPreferenceProvider;

  private Provider<PreferenceManger> provideSessionManagerProvider;

  private Provider<HawksDatabase> provideDatabaseProvider;

  private Provider<ProfileDao> provideProfileDaoProvider;

  private DaggerBuzinessApplication_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
    initialize(applicationContextModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  private AuthApi authApi() {
    return Networkmodule_ProvideServiceFactory.provideService(new RemoteDatasource());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationContextModule applicationContextModuleParam) {
    this.provideSharedPreferenceProvider = DoubleCheck.provider(new SwitchingProvider<SharedPreferences>(singletonC, 1));
    this.provideSessionManagerProvider = DoubleCheck.provider(new SwitchingProvider<PreferenceManger>(singletonC, 0));
    this.provideDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<HawksDatabase>(singletonC, 3));
    this.provideProfileDaoProvider = DoubleCheck.provider(new SwitchingProvider<ProfileDao>(singletonC, 2));
  }

  @Override
  public void injectBuzinessApplication(BuzinessApplication buzinessApplication) {
  }

  @Override
  public Set<Boolean> getDisableFragmentGetContextFix() {
    return Collections.<Boolean>emptySet();
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder dataBaseModule(DataBaseModule dataBaseModule) {
      Preconditions.checkNotNull(dataBaseModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder networkmodule(Networkmodule networkmodule) {
      Preconditions.checkNotNull(networkmodule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder sharedPreferenceModule(SharedPreferenceModule sharedPreferenceModule) {
      Preconditions.checkNotNull(sharedPreferenceModule);
      return this;
    }

    public BuzinessApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerBuzinessApplication_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements BuzinessApplication_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerBuzinessApplication_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(
        DaggerBuzinessApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public BuzinessApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements BuzinessApplication_HiltComponents.ActivityC.Builder {
    private final DaggerBuzinessApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(DaggerBuzinessApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public BuzinessApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements BuzinessApplication_HiltComponents.FragmentC.Builder {
    private final DaggerBuzinessApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerBuzinessApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public BuzinessApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements BuzinessApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerBuzinessApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(DaggerBuzinessApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public BuzinessApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements BuzinessApplication_HiltComponents.ViewC.Builder {
    private final DaggerBuzinessApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerBuzinessApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public BuzinessApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements BuzinessApplication_HiltComponents.ViewModelC.Builder {
    private final DaggerBuzinessApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerBuzinessApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public BuzinessApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements BuzinessApplication_HiltComponents.ServiceC.Builder {
    private final DaggerBuzinessApplication_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerBuzinessApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public BuzinessApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends BuzinessApplication_HiltComponents.ViewWithFragmentC {
    private final DaggerBuzinessApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(DaggerBuzinessApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends BuzinessApplication_HiltComponents.FragmentC {
    private final DaggerBuzinessApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(DaggerBuzinessApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectHomeFragment(HomeFragment homeFragment) {
      injectHomeFragment2(homeFragment);
    }

    @Override
    public void injectProfileFragment(ProfileFragment profileFragment) {
    }

    @Override
    public void injectShopFragment(ShopFragment shopFragment) {
    }

    @Override
    public void injectSupportFragment(SupportFragment supportFragment) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    private HomeFragment injectHomeFragment2(HomeFragment instance) {
      HomeFragment_MembersInjector.injectPreferenceManger(instance, singletonC.provideSessionManagerProvider.get());
      return instance;
    }
  }

  private static final class ViewCImpl extends BuzinessApplication_HiltComponents.ViewC {
    private final DaggerBuzinessApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerBuzinessApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends BuzinessApplication_HiltComponents.ActivityC {
    private final DaggerBuzinessApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(DaggerBuzinessApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
      injectMainActivity2(mainActivity);
    }

    @Override
    public void injectReferalActivity(ReferalActivity referalActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(5).add(HomeViemodel_HiltModules_KeyModule_ProvideFactory.provide()).add(ProfileViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ReferenceViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ShopViewmodel_HiltModules_KeyModule_ProvideFactory.provide()).add(SupportViewmodel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    private MainActivity injectMainActivity2(MainActivity instance) {
      MainActivity_MembersInjector.injectPreferenceManger(instance, singletonC.provideSessionManagerProvider.get());
      return instance;
    }
  }

  private static final class ViewModelCImpl extends BuzinessApplication_HiltComponents.ViewModelC {
    private final DaggerBuzinessApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<HomeViemodel> homeViemodelProvider;

    private Provider<ProfileViewModel> profileViewModelProvider;

    private Provider<ReferenceViewModel> referenceViewModelProvider;

    private Provider<ShopViewmodel> shopViewmodelProvider;

    private Provider<SupportViewmodel> supportViewmodelProvider;

    private ViewModelCImpl(DaggerBuzinessApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    private BusinessRepository businessRepository() {
      return new BusinessRepository(singletonC.authApi());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.homeViemodelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
      this.profileViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
      this.referenceViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 2);
      this.shopViewmodelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 3);
      this.supportViewmodelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 4);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(5).put("com.nithi.hawksbuziness.ui.home.HomeViemodel", ((Provider) homeViemodelProvider)).put("com.nithi.hawksbuziness.ui.profile.ProfileViewModel", ((Provider) profileViewModelProvider)).put("com.nithi.hawksbuziness.ui.activity.ReferenceViewModel", ((Provider) referenceViewModelProvider)).put("com.nithi.hawksbuziness.ui.shops.ShopViewmodel", ((Provider) shopViewmodelProvider)).put("com.nithi.hawksbuziness.ui.support.SupportViewmodel", ((Provider) supportViewmodelProvider)).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerBuzinessApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(DaggerBuzinessApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.nithi.hawksbuziness.ui.home.HomeViemodel 
          return (T) new HomeViemodel(viewModelCImpl.businessRepository());

          case 1: // com.nithi.hawksbuziness.ui.profile.ProfileViewModel 
          return (T) new ProfileViewModel(viewModelCImpl.businessRepository(), singletonC.provideSessionManagerProvider.get(), singletonC.provideProfileDaoProvider.get());

          case 2: // com.nithi.hawksbuziness.ui.activity.ReferenceViewModel 
          return (T) new ReferenceViewModel(viewModelCImpl.businessRepository());

          case 3: // com.nithi.hawksbuziness.ui.shops.ShopViewmodel 
          return (T) new ShopViewmodel(viewModelCImpl.businessRepository(), singletonC.provideSessionManagerProvider.get());

          case 4: // com.nithi.hawksbuziness.ui.support.SupportViewmodel 
          return (T) new SupportViewmodel(viewModelCImpl.businessRepository(), singletonC.provideSessionManagerProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends BuzinessApplication_HiltComponents.ActivityRetainedC {
    private final DaggerBuzinessApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(DaggerBuzinessApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerBuzinessApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerBuzinessApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends BuzinessApplication_HiltComponents.ServiceC {
    private final DaggerBuzinessApplication_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerBuzinessApplication_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerBuzinessApplication_HiltComponents_SingletonC singletonC;

    private final int id;

    SwitchingProvider(DaggerBuzinessApplication_HiltComponents_SingletonC singletonC, int id) {
      this.singletonC = singletonC;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // com.nithi.hawksbuziness.preferences.PreferenceManger 
        return (T) SharedPreferenceModule_ProvideSessionManagerFactory.provideSessionManager(singletonC.provideSharedPreferenceProvider.get());

        case 1: // android.content.SharedPreferences 
        return (T) SharedPreferenceModule_ProvideSharedPreferenceFactory.provideSharedPreference(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule));

        case 2: // com.nithi.hawksbuziness.local.dao.ProfileDao 
        return (T) DataBaseModule_ProvideProfileDaoFactory.provideProfileDao(singletonC.provideDatabaseProvider.get());

        case 3: // com.nithi.hawksbuziness.local.HawksDatabase 
        return (T) DataBaseModule_ProvideDatabaseFactory.provideDatabase(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule));

        default: throw new AssertionError(id);
      }
    }
  }
}
